#!/usr/bin/env ruby

require 'logger'
require 'thor'

require './lib/db'
require './lib/logger'
require './lib/predict'
require './lib/monitor'
require './lib/sun'

class OptionParser
  MONITORS = [:left, :middle, :right]
  SCREENS = Hash[%w(0 1 2).zip(MONITORS)]

  def initialize(options)
    @options = options
  end

  def monitors
    set = MONITORS.select { |x| @options[x] } | Array(SCREENS[@options[:screen]])
    if set.empty? then MONITORS else set end
  end
end

class Runner < Thor
  include Thor::Actions

  LOGFILE = '/var/log/monitor-brightness.log'
  PRESETS = {
   day:   [70, 90, 70],
   sunny: [80, 100, 80],
   night: [20, 60, 20]
  }

  class_option :left,   aliases: '-l', type: :boolean, desc: 'Left monitor'
  class_option :middle, aliases: '-m', type: :boolean, desc: 'Middle monitor'
  class_option :right,  aliases: '-r', type: :boolean, desc: 'Right monitor'
  class_option :screen, aliases: '-s', type: :string,  desc: 'Xinerama screen id'

  #default_task :set

  # shitty way to make sure we have the needed kernel module
  def initialize(*args)
    `sudo modprobe i2c-dev`
    super
  end

  desc 'record', 'learn'
  def record
    Logger.log
  end

  desc 'predict', 'predict'
  def predict
    Predict.predict
  end

  desc 'get', 'Get brightness'
  def get
    p monitors.map(&:get_brightness).join(' ')
  end

  desc 'set', 'Set brightness'
  def set(brightness)
    monitors.each { |x| x.set_brightness(brightness) }
    # log_brightness
  end

  desc 'preset', 'Presets for day, sunny and night'
  def preset(value)
    brightnesses = PRESETS[value.to_sym]
    Hash[monitors.zip(brightnesses)].each do |monitor, brightness|
      monitor.set_brightness(brightness)
    end
  end

  protected

  def monitors
    OptionParser.new(options).monitors.collect { |x| Monitor.new(x) }
  end

  def log_brightness
    logger = Logger.new(LOGFILE)
    logger.info MONITORS.map { |monitor| get_brightness(monitor) }.join(' ')
  rescue Errno::EACCES => e
    puts 'Log file does not exist'
    puts "sudo touch #{LOGFILE} && sudo chown $USER #{LOGFILE}"
    exit
  end

end

Runner.start
